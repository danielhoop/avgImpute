% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/avgImpute.R
\name{getNearestObs}
\alias{getNearestObs}
\title{Get the nearest observations in n-dimensional vector space}
\usage{
getNearestObs(
  data,
  dataGet,
  cols = NULL,
  indexCols = NULL,
  idCol = NULL,
  maxDist = NULL,
  maxObs = NULL,
  minObs = NULL,
  distFunc = stats::dist,
  scale = FALSE,
  warnScaling = TRUE
)
}
\arguments{
\item{data}{The data.frame containing the observations for which other observations should be found.}

\item{dataGet}{The data.frame containing the observations from which the clostest matching observations should be drawn.}

\item{cols}{Optional: The columns in \code{data} and \code{dataGet} to conduct the matching.}

\item{indexCols}{Optional: If given, then only observations will be matched from \code{dataGet} to \code{data}, when the value in \code{dataGet[, indexCols]} and \code{data[, indexCols]} are identical.}

\item{idCol}{Optional: The colname in `dataGet` that contains unique identifiers. If given, then an additional list place named "id" will be returned in the result containing the ids of the matched observations.}

\item{maxDist}{Optional (see details): The maximum distance between observations.}

\item{maxObs}{Optional (see details): The maximum number of observations that should be drawn in \code{dataGet} for each observation in \code{data}.}

\item{minObs}{Optional (see details): The minimum number of observations that should be drawn in \code{dataGet} for each observation in \code{data}.}

\item{distFunc}{The function to be applied in order to calculate the distance between all observations in \code{data}. Default is the function stats::dist.\cr}

\item{scale}{Logical value indicating if the data should be scaled before doing the calculations.}

\item{warnScaling}{Logical value indicating if a warning should be issued when the variables are on very different scale.
You can change the distance metric, e.g. to \code{'manhattan'} by setting \code{distFunc = function (x) \link[stats:dist]{stats::dist}(x, method='manhattan')}.
Or you could use the inverse of the cosine similarity as distance: \code{distFunc = function (x) 1/\link[coop:cosine]{coop::cosine}(t(x))}.}
}
\value{
A list with two entries named 'ind' and 'dist'. Both list entries are a matrix of size \code{nrow(data) * nObs}.\cr
Each row in 'ind' contains the indices of the observations to be taken from \code{dataGet}, in ascending order, according to the distance.\cr
Each row in 'dist' contains the distances to the observations to be taken from \code{dataGet}, in ascending order.\cr
If not the same number of observations was chosen for each observation in \code{data}, then the rest of the columns in each for of 'ind' and 'dist' is filled with NA values.
}
\description{
Finds the nearest observations in \code{dataGet} that match most closely the observations in \code{data}.
}
\details{
If \code{maxDist} is not specified, then at least \code{minObs} must be given.\cr
If \code{minObs >= nrow(dataGet)}, then an error is thrown, because in that case each observation in dataGet would be chosen and the matching wouldn't have any effect at all.
}
\examples{
data <- as.data.frame(matrix(rnorm(100), ncol=5))
dataGet <- as.data.frame(matrix(rnorm(1000), ncol=5))
getNearestObs(data = data, dataGet = dataGet, cols = c("V1", "V2"), maxDist = 3, minObs = 10, maxObs = 20, scale = TRUE, distFunc = function (x) stats::dist(x, method='manhattan'))
}
\author{
Daniel Hoop
}
