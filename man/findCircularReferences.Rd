% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/avgImpute.R
\name{findCircularReferences}
\alias{findCircularReferences}
\title{Find circular references}
\usage{
findCircularReferences(
  expr,
  assignOp = c("<-", "="),
  filterPatternFunction = function(x) return(x[!grepl("^(lookup|if) *\\\\(", x)])
)
}
\arguments{
\item{expr}{The expression that should be evaluated. Must be quoted like \code{expr = quote({ a <- 1; b <- 2 })}}

\item{assignOp}{The assignment operator which assigns the values of the right hand side (RHS) to the left hand side (LHS). A character vector of any length, e.g. c("<-", "=")}

\item{filterPatternFunction}{A function to filter the parts of a line. Consider a line \code{b <- a * foo(b/a)}.\cr
The function \code{foo} might take the value of \code{b} from somewhere else, thus you don't want this to be identified as a circular reference.\cr
In this case, specify \code{filterPatternFunction} as follows: \code{filterPatternFunction = function(x) return(x[!startsWith(x, 'foo(')]))}}
}
\value{
\code{NULL}, if no circular references are found, otherwise the lines of the expression that contain circular references.
}
\description{
Finds circular references in an expression.
}
\examples{
expr <- quote({ a <- b; b <- c; c <- a })
findCircularReferences(expr)
# [1] "a <- b" "b <- c" "c <- a"

findCircularReferences(quote({ a <- if (a == 1) a + 1 else b }))
# [1] "a <- if (a == 1) a + 1 else b"

findCircularReferences(quote({ a <- if (a == 1) 2 else a + b }))
# [1] "a <- if (a == 1) 2 else a + b"

expr <- quote({
  a <- 1
  z <- 9
  b <- 2
  if (a == 1) y <- z else if (b == 1) a <- 1 else x <- z
  d <- 3
  z <- y
})
findCircularReferences(expr)
[1] "z <- 9" "y <- z" "z <- y"

findCircularReferences(quote({ a <- b; c <- d }))
# NULL

findCircularReferences(quote({ a <- if (a == 1) 2 else b }))
# NULL
}
\author{
Daniel Hoop
}
